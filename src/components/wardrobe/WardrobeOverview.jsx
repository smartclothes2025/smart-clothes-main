import React, { useEffect, useState, useCallback } from "react";
import { useNavigate } from "react-router-dom";
import WardrobeItem from "./WardrobeItem";
import EditClothModal from "./EditClothModal";
import AskModal from "../AskModal";
import { useToast } from "../ToastProvider"; // ÂºïÂÖ• Toast

const OUTFIT_KEY = "outfit_history";
// ËºîÂä©ÂáΩÂºèÔºöÂèñÂæóÊ≠∑Âè≤Á©øÊê≠ (‰øùÊåÅ‰∏çËÆä)
const getOutfits = () => {
  try {
    return JSON.parse(localStorage.getItem(OUTFIT_KEY)) || [];
  } catch {
    return [];
  }
};
// ËºîÂä©ÂáΩÂºèÔºöÂÑ≤Â≠òÊ≠∑Âè≤Á©øÊê≠ (‰øùÊåÅ‰∏çËÆä)
const saveOutfits = (list) => localStorage.setItem(OUTFIT_KEY, JSON.stringify(list));
// ËºîÂä©ÂáΩÂºèÔºöÊñ∞Â¢ûÊ≠∑Âè≤Á©øÊê≠ (‰øùÊåÅ‰∏çËÆä)
const addOutfit = ({ clothesIds = [], note = "", img = "" }) => {
  const list = getOutfits();
  const today = new Date().toISOString().slice(0, 10);
  list.push({
    id: Date.now(),
    date: today,
    clothesIds,
    note: note || "ÁÑ°ÂÇôË®ª",
    img: img || "/default-outfit.png",
  });
  saveOutfits(list);
  try {
    localStorage.setItem(`${OUTFIT_KEY}_last_update`, Date.now().toString());
  } catch { }
};

const filters = ["ÂÖ®ÈÉ®", "‰∏äË°£", "Ë§≤Â≠ê", "Ë£ôÂ≠ê", "Ê¥ãË£ù", "Â§ñÂ•ó", "ÈûãÂ≠ê", "Â∏ΩÂ≠ê", "ÂåÖÂåÖ", "ÈÖç‰ª∂", "Ë•™Â≠ê"];
const API_BASE = (import.meta && import.meta.env && import.meta.env.VITE_API_BASE) ? import.meta.env.VITE_API_BASE : ""; // use relative paths by default to enable Vite proxy

// ËºîÂä©ÂáΩÂºèÔºöÂèñÂæó JWT Token
function getToken() {
  return localStorage.getItem("token") || "";
}

export default function WardrobeOverview() {
  const INACTIVE_THRESHOLD = 90;
  const { addToast } = useToast(); // ÂàùÂßãÂåñ Toast

  useEffect(() => {
    // ÂïüÂãïÊôÇÊ∏ÖÁêÜÊú¨Âú∞ËàäÁöÑÊ∏¨Ë©¶Êï∏Êìö
    try {
      localStorage.removeItem("wardrobe_items");
      localStorage.removeItem("wardrobe_items_seed");
    } catch { }
  }, []);

  const [items, setItems] = useState([]);
  const [activeFilter, setActiveFilter] = useState(filters[0]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  const [selecting, setSelecting] = useState(false);
  const [selectedIds, setSelectedIds] = useState([]);
  const [editOpen, setEditOpen] = useState(false);
  const [editItem, setEditItem] = useState(null);
  const navigate = useNavigate();

  // --- Êï∏ÊìöËºâÂÖ•ÈÇèËºØ ---
  const fetchWardrobe = useCallback(async (signal) => {
    setLoading(true);
    setError("");
    const token = getToken();
    
    // Ë®™ÂÆ¢Â∏≥ËôüÊ™¢Êü•
    let storedUser = null;
    try {
      const u = localStorage.getItem('user');
      storedUser = u ? JSON.parse(u) : null;
    } catch (e) {
      storedUser = null;
    }
    const isGuest = token === 'guest-token-000' || storedUser?.id === 99 || storedUser?.name === 'Ë®™ÂÆ¢' || storedUser?.email === 'guest@local';
    
    if (isGuest) {
      setItems([]);
      setError('Ë®™ÂÆ¢ÁÑ°Ê≥ïÊü•ÁúãË°£Ê´ÉÔºåË´ãÁî®Ë®ªÂÜäÂ∏≥ËôüÊàñÂÖ∂‰ªñ‰ΩøÁî®ËÄÖÁôªÂÖ•');
      setLoading(false);
      return;
    }

    const headers = { Authorization: `Bearer ${token}` };
    
    // üéØ ‰øÆÊ≠£ÂæåÁöÑ API ÂëºÂè´ÔºöÁµ±‰∏Ä‰∏îÁ¢∫ÂÆöÁöÑË∑ØÁî±
    const URL = `${API_BASE}/clothes`; 
    
    try {
        const res = await fetch(URL, { method: "GET", headers, signal });
        
        if (res.status === 404) {
             throw new Error(`Áç≤ÂèñË°£Áâ©Ê∏ÖÂñÆÂ§±Êïó: ÂæåÁ´ØË∑ØÁî± ${URL} Êâæ‰∏çÂà∞ (404)`);
        }
        
        if (!res.ok) {
            const txt = await res.text().catch(() => "");
            console.error('[wardrobe] fetch failed', res.status, txt);
            throw new Error(`Áç≤ÂèñË°£Áâ©Ê∏ÖÂñÆÂ§±Êïó: ${res.statusText}`);
        }
        
        const data = await res.json();
        
        const arr = Array.isArray(data) ? data : (Array.isArray(data?.initialItems) ? data.initialItems : null);
        if (!arr) {
          throw new Error("API ÂõûÂÇ≥Ê†ºÂºèÈùûÈ†êÊúüÔºàË´ãÊ™¢Êü•ÂæåÁ´ØÊòØÂê¶ÂõûÂÇ≥Èô£ÂàóÊàñ { initialItems: [...] }Ôºâ");
        }

        // GCS ÂúñÁâáËôïÁêÜÔºöÂæåÁ´ØÂ∑≤ËøîÂõû HTTPS Á∂≤ÂùÄÔºåÂâçÁ´ØÂè™ÈúÄÁ∞°ÂñÆËôïÁêÜ URL
        const mapped = arr.map((it) => {
    // ÂÑ™ÂÖà‰ΩøÁî® item.cover_url (Â¶ÇÊûúÂæåÁ´ØÊúâÊèê‰æõ)
    let rawUrl = it.cover_url || it.img || ""; 
    let finalImgUrl = rawUrl;

    // üéØ ‰øÆÊ≠£ÔºöËôïÁêÜË¢´ÈåØË™§ÊãºÊé•ÁöÑ GCS URL
    // Ê™¢Êü•ÊòØÂê¶ÊúâÂ∏∏Ë¶ãÁöÑÈåØË™§ÊãºÊé•ÂâçÁ∂¥
    const localErrorPrefix = 'http://localhost:5173/';
    
    if (finalImgUrl && finalImgUrl.startsWith(localErrorPrefix)) {
        // Â¶ÇÊûúÊòØ GCS URL Ë¢´ÈåØË™§ÊãºÊé•‰∫ÜÊú¨Âú∞ hostÔºåÁßªÈô§Êú¨Âú∞ host
        if (finalImgUrl.includes('https://storage.googleapis.com/')) {
             finalImgUrl = finalImgUrl.substring(localErrorPrefix.length);
             console.warn(`[ParentComponent] ‚ö†Ô∏è ‰øÆÊ≠£ GCS URL ÈáçË§áÊãºÊé•: ${finalImgUrl}`);
        }
    }
    
    // Áî±ÊñºÂæåÁ´Ø resolve_image_url Â∑≤Á∂ìËøîÂõûÂÆåÊï¥ÁöÑ HTTPS Á∂≤ÂùÄÔºåÈÄôË£°Âè™ÈúÄÁ¢∫‰øùÈùûÁ©∫
    return {
        id: Number.isInteger(+it.id) ? +it.id : it.id,
        name: it.name || "",
        category: it.category || "",
        wearCount: it.wearCount || 0,
        // Á¢∫‰øù img Ê¨Ñ‰Ωç‰ΩøÁî®‰øÆÊ≠£ÂæåÁöÑ URL
        img: finalImgUrl || '/default-placeholder.png',¬†
        daysInactive: typeof it.daysInactive === "number" ? it.daysInactive : null,
        color: it.color || "",
    };
});

setItems(mapped);

    } catch (err) {
        if (err && err.name === "AbortError") return;
        console.warn("ËºâÂÖ•Ë°£Ê´ÉÂ§±Êïó:", err);
        setError(err.message || "ÁÑ°Ê≥ïËºâÂÖ•Ë°£Ê´ÉÔºåË´ãÁ¢∫Ë™çÂæåÁ´ØÊàñÁ∂≤Ë∑ØÈÄ£Á∑ö");
        setItems([]);
    } finally {
        setLoading(false);
    }
  }, [API_BASE, addToast]);

  useEffect(() => {
    const controller = new AbortController();
    fetchWardrobe(controller.signal);
    return () => controller.abort();
  }, [fetchWardrobe]);

  // --- Êñ∞Â¢ûÂà™Èô§Ë°£Áâ©ÂäüËÉΩ ---
  const [askOpen, setAskOpen] = useState(false);
  const [askTargetId, setAskTargetId] = useState(null);
  const [batchAskOpen, setBatchAskOpen] = useState(false);

  const deleteItem = useCallback(async (itemId) => {
  setLoading(true);
  const token = getToken();
  const headers = { Authorization: `Bearer ${token}` };

  try {
    // üéØ ÂëºÂè´ÂæåÁ´Ø DELETE Ë∑ØÁî±: /api/v1/clothes/{itemId}
    const res = await fetch(`${API_BASE}/clothes/${itemId}`, {
      method: "DELETE",
      headers,
    });

    if (res.status === 204) { // 204 No Content ÊòØÊàêÂäüÁöÑÂõûÊáâ
      addToast({ type: 'success', title: 'Âà™Èô§ÊàêÂäü', message: 'Ë©≤Ë°£Áâ©Â∑≤ÂæûË°£Ê´É‰∏≠ÁßªÈô§„ÄÇ' });
      // ÂæûÊú¨Âú∞ÁãÄÊÖã‰∏≠ÁßªÈô§
      setItems(prev => prev.filter(item => item.id !== itemId));
    } else if (res.status === 403) {
       addToast({ type: 'error', title: 'Ê¨äÈôê‰∏çË∂≥', message: 'ÊÇ®Ê≤íÊúâÊ¨äÈôêÂà™Èô§ÈÄô‰ª∂Ë°£Áâ©„ÄÇ' });
    } else {
      const txt = await res.text().catch(() => "Êú™Áü•ÈåØË™§");
      addToast({ type: 'error', title: 'Âà™Èô§Â§±Êïó', message: `ÂæåÁ´ØÈåØË™§Ôºö${res.status} ${txt}` });
    }

  } catch (error) {
    console.error("Âà™Èô§ÈåØË™§:", error);
    addToast({ type: 'error', title: 'Á∂≤Ë∑ØÈåØË™§', message: 'ÁÑ°Ê≥ïÈÄ£Á∑öÂà∞‰º∫ÊúçÂô®ÔºåÂà™Èô§Â§±Êïó„ÄÇ' });
  } finally {
    setLoading(false);
  }
  }, [API_BASE, addToast]);

  function openAskModal(id) {
  setAskTargetId(id);
  setAskOpen(true);
  }

  function openBatchAskModal() {
    setBatchAskOpen(true);
  }

  async function handleConfirmBatchDelete() {
    // ÈóúÈñâ modal ‰∏¶ÈÄê‰∏ÄÂà™Èô§ÈÅ∏ÂèñÈ†ÖÁõÆ
    setBatchAskOpen(false);
    try {
      for (const id of selectedIds.slice()) {
        // Á≠âÂæÖÊØèÂÄãÂà™Èô§ÂÆåÊàê‰ª•ÈÅøÂÖçÂêåÊôÇÊîπËÆäÁãÄÊÖãË°ùÁ™Å
        // deleteItem ÊúÉËôïÁêÜÈåØË™§Ëàá toast
        // eslint-disable-next-line no-await-in-loop
        await deleteItem(id);
      }
    } finally {
      setSelecting(false);
      setSelectedIds([]);
    }
  }
  // -----------------------

  const filteredItems = items.filter((it) => activeFilter === "ÂÖ®ÈÉ®" || it.category === activeFilter);

  const toggleSelect = (id) => {
    setSelectedIds((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));
  };

  const goToVirtualFitting = () => {
    if (selectedIds.length === 0) return;
    const selectedItems = items.filter(item => selectedIds.includes(item.id));
    localStorage.setItem('virtual_fitting_items', JSON.stringify(selectedItems));
    navigate('/virtual-fitting');
  };

  return (
    <div>
      <div className="flex flex-wrap items-center gap-2 mb-4">
        {filters.map((f) => (
          <button
            key={f}
            onClick={() => setActiveFilter(f)}
            className={`px-3 py-1 text-sm rounded-full transition-colors ${activeFilter === f ? "bg-indigo-600 text-white" : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
          >
            {f}
          </button>
        ))}

        <div className="ml-auto flex items-center gap-2">
          {!selecting ? (
            <>
                <button 
                    onClick={() => setSelecting(true)} 
                    className="px-3 py-1 text-sm rounded-md bg-indigo-600 text-white"
                >
                  ÈÅ∏ÂèñË°£Êúç
                </button>
                 <button 
                    onClick={() => navigate('/upload/select')} 
                    className="px-3 py-1 text-sm rounded-md bg-gray-600 text-white"
                >
                  Êñ∞Â¢ûË°£Áâ©
                </button>
            </>
          ) : (
            <>
              {selectedIds.length > 0 && (
                <button
                    onClick={() => openBatchAskModal()}
                    className="px-3 py-1 text-sm rounded-md bg-red-600 text-white disabled:opacity-50"
                >
                    Âà™Èô§Ôºà{selectedIds.length}Ôºâ
                </button>
              )}
              
              <button
                onClick={goToVirtualFitting}
                disabled={selectedIds.length === 0}
                className="px-3 py-1 text-sm rounded-md bg-green-600 text-white disabled:opacity-50"
              >
                ËôõÊì¨Ë©¶Ë°£Ôºà{selectedIds.length}Ôºâ
              </button>
              <button
                onClick={() => {
                  setSelecting(false);
                  setSelectedIds([]);
                }}
                className="px-3 py-1 text-sm rounded-md bg-gray-200"
              >
                ÂèñÊ∂à
              </button>
            </>
          )}
        </div>
      </div>

      {loading && <div className="py-6 text-gray-500">ËºâÂÖ•‰∏≠‚Ä¶</div>}
      {error && <div className="py-2 text-red-600">{error}</div>}

      {/* Á©∫Ë≥áÊñôÊèêÁ§∫ */}
      {!loading && filteredItems.length === 0 ? (
        <div className="text-gray-500">ÁõÆÂâçË°£Ê´ÉÊ≤íÊúâË°£Êúç<br />Ë´ãÂÖàÁ¢∫Ë™çÊòØÂê¶Êúâ‰∏äÂÇ≥Ë°£Êúç</div>
      ) : (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {filteredItems.map((item) => (
            <WardrobeItem
              key={item.id}
              item={item}
              selecting={selecting}
              active={selectedIds.includes(item.id)}
              onToggle={() => toggleSelect(item.id)}
              // ‰ΩøÁî® onDelete Áî±Áà∂ÂÖÉ‰ª∂Ëß∏Áôº AskModal
              onDelete={() => openAskModal(item.id)}
              inactiveThreshold={INACTIVE_THRESHOLD}
                      onImageClick={(clicked) => { setEditItem(clicked); setEditOpen(true); }}
            />
          ))}
        </div>
      )}
              {/* Á∑®ËºØË°£Áâ© Modal */}
              <EditClothModal
                open={editOpen}
                item={editItem}
                onClose={() => { setEditOpen(false); setEditItem(null); }}
                apiBase={API_BASE}
                onSaved={(updated) => {
                  setItems(prev => prev.map(it => it.id === updated.id ? { ...it, ...updated } : it));
                  addToast({ type: 'success', title: 'Â∑≤Êõ¥Êñ∞Ë°£Áâ©' });
                }}
              />
      <AskModal
        open={askOpen}
        title="Âà™Èô§Ë°£Áâ©"
        message="Á¢∫ÂÆöË¶ÅÂà™Èô§Ê≠§Ë°£Áâ©Ôºü"
        confirmText="Âà™Èô§"
        cancelText="ÂèñÊ∂à"
        destructive={true}
        onCancel={() => { setAskOpen(false); setAskTargetId(null); }}
        onConfirm={() => { if (askTargetId) { deleteItem(askTargetId); setAskOpen(false); setAskTargetId(null); } }}
      />
      <AskModal
        open={batchAskOpen}
        title="Âà™Èô§Â§öÁ≠ÜË°£Áâ©"
        message={`Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÅ∏‰∏≠ÁöÑ ${selectedIds.length} ‰ª∂Ë°£Áâ©ÂóéÔºü`}
        confirmText="Âà™Èô§"
        cancelText="ÂèñÊ∂à"
        destructive={true}
        onCancel={() => { setBatchAskOpen(false); }}
        onConfirm={() => { handleConfirmBatchDelete(); }}
      />
    </div>
  );
}